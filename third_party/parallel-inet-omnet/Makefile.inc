#
# Do not edit this file -- it gets generated from Makefile.inc.in.
# Your changes will be lost the next time ./configure is run.
#
OMNETPP_PRODUCT = OMNeT++
OMNETPP_RELEASE = omnetpp-4.5
OMNETPP_VERSION = 4.5
OMNETPP_BUILDID = 140714-c6b1772
OMNETPP_EDITION = Academic Public License -- NOT FOR COMMERCIAL USE

#
# Directories
#
OMNETPP_ROOT = /bigdisk/qizhen/parallel-inet-omnet
OMNETPP_BIN_DIR = /bigdisk/qizhen/parallel-inet-omnet/bin
OMNETPP_INCL_DIR = /bigdisk/qizhen/parallel-inet-omnet/include
OMNETPP_LIB_DIR = /bigdisk/qizhen/parallel-inet-omnet/lib
OMNETPP_OUT_DIR = /bigdisk/qizhen/parallel-inet-omnet/out
OMNETPP_IMAGE_PATH = ./bitmaps;./images;/bigdisk/qizhen/parallel-inet-omnet/images

OMNETPP_SRC_DIR = /bigdisk/qizhen/parallel-inet-omnet/src
OMNETPP_UI_DIR = /bigdisk/qizhen/parallel-inet-omnet/ui
OMNETPP_UTILS_DIR = /bigdisk/qizhen/parallel-inet-omnet/src/utils
OMNETPP_DOC_DIR = /bigdisk/qizhen/parallel-inet-omnet/doc
OMNETPP_SAMPLES_DIR = /bigdisk/qizhen/parallel-inet-omnet/samples
OMNETPP_TEST_DIR = /bigdisk/qizhen/parallel-inet-omnet/test

#
# Make "debug" the default mode
#
ifndef MODE
MODE = debug
endif

#
# Configname determines where (in which subdirectory of out/)
# makemake-generated makefiles create object files and other
# build artifacts.
#
ifndef CONFIGNAME
CONFIGNAME = $(TOOLCHAIN_NAME)-$(MODE)
endif

#
# Various tools and options
#
ifeq ($(MODE),debug)
CFLAGS=$(CFLAGS_DEBUG)
D=d
else
CFLAGS=$(CFLAGS_RELEASE)
D=
endif

#
# Control verbosity. Specifiying V=1 will make the build output verbose. You can use:
# $(Q) to hide commands only in quiet mode
# $(qecho) to print out something only in quite mode
# $(vecho) to print out something only in verbose mode
#
ifeq ($(V),1)
Q :=
vecho = @echo
qecho = @true
else
Q := @
vecho = @true
qecho = @echo
endif

PERL = perl
YACC = bison -y
LEX = flex
CC = gcc
CXX = g++
TOOLCHAIN_NAME = gcc
CXXFLAGS = 
CFLAGS_DEBUG =  -g -Wall -fPIC  -fno-stack-protector -DHAVE_SWAPCONTEXT  -DHAVE_PCAP -DXMLPARSER=libxml -DWITH_PARSIM -DWITH_NETBUILDER
CFLAGS_RELEASE =  -O2 -DNDEBUG=1 -fPIC  -fno-stack-protector -DHAVE_SWAPCONTEXT  -DHAVE_PCAP -DXMLPARSER=libxml -DWITH_PARSIM -DWITH_NETBUILDER
LDFLAGS =   -Wl,-rpath,$(OMNETPP_LIB_DIR) -Wl,-rpath,.
WHOLE_ARCHIVE_ON = -Wl,--whole-archive
WHOLE_ARCHIVE_OFF = -Wl,--no-whole-archive
AS_NEEDED_ON = -Wl,--as-needed
AS_NEEDED_OFF = -Wl,--no-as-needed
PIC_FLAGS = -fPIC
MYPWD = pwd
MSGC = opp_msgc
NEDTOOL = nedtool
AS = as
AR = ar cr
RANLIB = ranlib
SHLIB_LD = g++ -shared -fPIC
DLLTOOL = dlltool
STRIP = strip
WISH = wish
MAKEDEPEND = opp_makedep -Y --objdirtree
LN = ln -sf
MKPATH = mkdir -p
SHLIB_POSTPROCESS = opp_shlib_postprocess

A_LIB_SUFFIX = .a
SO_LIB_SUFFIX = .so
DLL_LIB_SUFFIX = .dll
JNI_LIB_SUFFIX = $(SO_LIB_SUFFIX)
EXE_SUFFIX = 
LIB_PREFIX = lib

ifeq ("$(SHARED_LIBS)", "")
SHARED_LIBS = yes
endif

ifeq ($(BUILDING_UILIBS),yes)
SHARED_LIBS=no
OUTPUT_PREFIX=ui-
endif

SHARED_LIB_SUFFIX = $(SO_LIB_SUFFIX)

SYSTEMC= no
NO_TCL = 
HAVE_DLOPEN = 1
TK_CFLAGS = -I/usr/include/tcl8.6
TK_LIBS = -ltk8.6 -ltcl8.6
ZLIB_CFLAGS = 
ZLIB_LIBS = -lz
HAVE_MPI = yes
MPI_CFLAGS = -I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent -I/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include -I/usr/lib/openmpi/include -I/usr/lib/openmpi/include/openmpi -pthread -DWITH_MPI
MPI_LIBS = -pthread -Wl,-rpath -Wl,/usr/lib/openmpi/lib -Wl,--enable-new-dtags -L/usr/lib/openmpi/lib -lmpi_cxx -lmpi
HAVE_PCAP = yes
PCAP_CFLAGS = 
PCAP_LIBS = -lpcap
HAVE_PTHREAD = yes
PTHREAD_CFLAGS = 
PTHREAD_LIBS = -lpthread

XMLPARSER = libxml
XML_CFLAGS = -I/usr/include/libxml2
XML_LIBS = -lxml2

AKAROA_CFLAGS = -I/usr/local/akaroa/include
AKAROA_LIBS = -L/usr/local/akaroa/lib -lakaroa -lfl

TKENV_IF_POSSIBLE = tkenv
JNILIBS_IF_POSSIBLE = missing-dependency

EMBED_TCL_CODE = yes
OMNETPP_TKENV_DIR = /bigdisk/qizhen/parallel-inet-omnet/src/tkenv

WITH_NETBUILDER = yes
WITH_PARSIM = yes

JAVA_CFLAGS = -fno-strict-aliasing -I/usr/lib/jvm/default-java/include -I/usr/lib/jvm/default-java/include/linux
JAVA_LIBS = -L/usr/lib/jvm/default-java/jre/lib/i386/client -Wl,-rpath,/usr/lib/jvm/default-java/jre/lib/i386/client:. -ljvm
SWIG = not found
PLATFORM = linux.x86_64

#
# Definitions for makemake-generated makefiles
#
ALL_ENV_LIBS = $(TKENV_LIBS) $(CMDENV_LIBS)
CMDENV_LIBS = -u _cmdenv_lib $(AS_NEEDED_OFF) -loppcmdenv$D -loppenvir$D
TKENV_LIBS = -u _tkenv_lib $(AS_NEEDED_OFF) -lopptkenv$D -loppenvir$D -lopplayout$D
KERNEL_LIBS = -loppsim$D

ifeq ($(SHARED_LIBS),yes)
  LIB_SUFFIX =  $(SHARED_LIB_SUFFIX)
else
  LIB_SUFFIX = $(A_LIB_SUFFIX)
  # extra libs we are indirectly depend on. they are needed if we are building statically
  KERNEL_LIBS += -loppnedxml$D -loppcommon$D $(XML_LIBS) 
  TKENV_LIBS += $(TK_LIBS) $(ZLIB_LIBS)

  ifeq ($(WITH_PARSIM),yes)
    ifeq ($(HAVE_MPI),yes)
      KERNEL_LIBS += $(MPI_LIBS)
    endif
  endif

  # add the Carbon framework if we are building statically on Mac OS X, because Tcl/Tk needs it
  #FIXME why not in ./configure?
  ifeq ($(PLATFORM),macosx)
    TKENV_LIBS += -framework Carbon
  endif
endif

SYS_LIBS = -ldl -lstdc++ 

