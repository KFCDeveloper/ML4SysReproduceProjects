%description:
Tests an activity() simple module deleting anoter activity() simple module
which
  (a) stays inside a wait() call
  (b) stays inside a receive() call and has scheduled events.

%file: test.ned

simple NodeA
{
}

simple NodeB
{
}

simple Deleter
{
}

network Test
{
    submodules:
        nodeA: NodeA;
        nodeB: NodeB;
        deleter: Deleter;
}

%file: test.cc

#include <omnetpp.h>

namespace @TESTNAME@ {

class NodeA : public cSimpleModule
{
  public:
    NodeA() : cSimpleModule(16384) { }
    virtual void activity();
};

Define_Module(NodeA);

void NodeA::activity()
{
    for (int i=0; i<10; i++)
    {
        ev << "NodeA " << getFullPath() << " at t=" << simTime() << endl;
        wait(1);
    }
}

class NodeB : public cSimpleModule
{
  public:
    NodeB() : cSimpleModule(16384) { }
    virtual void activity();
};

Define_Module(NodeB);

void NodeB::activity()
{
    cMessage *msg = new cMessage("timeout");
    for (int i=0; i<10; i++)
    {
        ev << "NodeB " << getFullPath() << " at t=" << simTime() << endl;
        scheduleAt(simTime()+1, msg);
        msg = receive();
    }
}

class Deleter : public cSimpleModule
{
  public:
    Deleter() : cSimpleModule(16384) { }
    virtual void activity();
};

Define_Module(Deleter);

void Deleter::activity()
{
    wait(3);

    ev << "Deleting nodeA, nodeB at t=" << simTime() << endl;
    cModule *nodeA = getParentModule()->getSubmodule("nodeA");
    cModule *nodeB = getParentModule()->getSubmodule("nodeB");
    nodeA->deleteModule();
    nodeB->deleteModule();
    ev << "Deleted" << endl;

    wait(2);
    ev << "Still here at t=" << simTime() << endl;
}

}; //namespace

%inifile: test.ini
[General]
network = Test
cmdenv-express-mode = false
cmdenv-event-banners = false

%contains: stdout
NodeA Test.nodeA at t=0
NodeB Test.nodeB at t=0
NodeA Test.nodeA at t=1
NodeB Test.nodeB at t=1
NodeA Test.nodeA at t=2
NodeB Test.nodeB at t=2
Deleting nodeA, nodeB at t=3
Deleted
Still here at t=5

